package com.kh.spring.member.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.kh.spring.member.model.service.MemberService;
import com.kh.spring.member.model.service.MemberServiceImpl;
import com.kh.spring.member.model.vo.Member;

// annotation방식  => 빈 스캐닝을 통해 자동으로 빈으로 등록될 것임(스프링이 알아서 관리)
@Controller
public class MemberController {
	
	// DI(Dependency Injection)
	// Autowired 타입의 어노테이션을 붙여주면 내가 직접 생성할 필요 없이 
	// 등록되어 있는 빈들 중에서 해당 타입과 맞는 클래스를 찾아서 자동으로 생성 후 주입해줌!!
	@Autowired
	private MemberService mService;
	
	
	/*
	@RequestMapping("login.me") // @RequestMapping타입의 annotation을 붙여줌으로써 HandlerMapping등록
	public String loginMember() {
		System.out.println("실행되나");
		
		// 응답페이지로 WEB-INF/views/main.jsp
		return "main";
		// 여기서 반환되는 문자열로 servlet-context.xml파일에 기술되어있는 ViewResolver 관련한 부분에
		// 기술되어 있는 접두어랑 접미어로 인해서
		//앞에는 /WEB-INF/views/ 붙고 뒤에는 .jsp를 붙여서 만들어진 경로로 응답 jsp를 찾음
		// /WEB-INF/views/main.jsp
	}
	*/
	
	/* * 파라미터(요청시 전달된 값)를 전송받는 방법(요청시 전달되는 값들 처리방법)
	
	// 1. HttpServletRequest를 통해 전송받기 (기존의 jsp/servlet 때의 방식)
	 * 해당 메소드의 매개변수로 HttpServletRequest 작성하면 
	 * 해당 메소드 자동으로 실행시 스프링컨테이너가 자동으로 해당 객체를 인자로 주입함 
	
	@RequestMapping("login.me")
	public String loginMember(HttpServletRequest request) {
		
		String userId = request.getParameter("id");
		String userPwd = request.getParameter("pwd");
		
		System.out.println("ID : " + userId );
		System.out.println("pwd : " + userPwd );
		
		return "main";
	}
	*/
	
	/*
	 * 2. @RequestParam 어노테이션 방식
	 *    스프링에서 조금 더 간단하게 파라미터를 받아올 수 있는 방법 제공
	 * 	  HttpServletRequest와 비슷하게 request객체를 이용해서 데이터 전송받는 방법
	
	@RequestMapping("login.me")
	public String loginMember(@RequestParam("id") String userId, 
							  @RequestParam(value="pwd", defaultValue="aaa") String userPwd) {
		
		System.out.println("ID : " + userId );
		System.out.println("pwd : " + userPwd );
		
		return "main";
	}
	 */
	
	/*
	 * 3. @RequestParam 어노테이션 생략하는 방법 
	 * 요청시 전달되는 키값과 받아주고하는 매개변수명과 일치할 경우 
	 * 해당 매개변수에 값이 바로 담기게 됨
	 * 요청시 전달되는 키값 = id, pwd => header.jsp에서 name값을 매개변수와 동일하게 userId, userPwd로 바꿔주기
	 * 
	 
	@RequestMapping("login.me")
	public String loginMember(String userId, String userPwd) {
		
		System.out.println("ID : " + userId );
		System.out.println("pwd : " + userPwd );
		
		Member m = new Member();
		m.setUserId(userId);
		m.setPassword(userPwd);
		
		return "main";
	}
	*/
	
	/*
	 * 4. 곧바로 vo객체의 필드에 담는 방법
	 *    커맨드객체 방식이라고 얘기함
	 *    스프링컨테이너가 해당 매개변수로 있는 객체를 기본생성자로 생성한 후 
	 *    setter메소드로 값을 주입해줌!
	 *    
	 *    * 주의사항
	 *    - 반드시 요청시 전달값의 키값(name 속성값)과 내가 담고자하는 객체의 필드명이 일치해야됨
	 *    - 반드시 해당 vo클래스에 기본생성자, setter메소드 무조건 있어야 됨
	 *    - 
	 */
	
	/*
	@RequestMapping("login.me")
	public String loginMember(Member m, HttpSession session) {
		
		//MemberService mService = new MemberServiceImpl();
		// 직접 객체 생성(코드로써 new 키워드) 을 하게 되면 => 결합도가 높음!
		// 결합도가 높을때 발생할 수 있는 문제
		// 1. 클래스명이 변경됐을 경우 => 컴파일 에러 발생
		// 2. 메모리영역 매번 새로이 생성됐다가 소멸되는 과정이 반복
		//    (즉, 10000건의 요청이 들어오면 10000개의 객체가 생성됐다 소멸된다!)
		// 
		
		// 위의 문제점을 해소하고자 한다면 => 결합도 낮춰주면됨! (즉, 직접 new로 객체 생성 안 하면됨 )
		// => 우선 스프링컨테이너가 해당 MemberServiceImpl객체를 관리할 수 있도록 해당 클래스를 ""
		// => DI(의존성 주입)을 통해서 생성된 객체 받아다 쓰면됨
		
		Member loginUser = mService.loginMember(m);
		if(loginUser == null) { // 로그인 실패 => 에러문구 request에 담은 후 => 에러페이지			
			// 포워딩방식 (/WEB-INF/views/common/errorPage/jsp)
			return "common/errorPage"; // /WEB-INF/views/common/errorPage.jsp
		} else {
			session.setAttribute("loginUser", loginUser);
			
			// url 재요청 방식
			return "redirect:/"; // request.sendRedirect 와 같음
		}
	}	
		*/
	
	// 이제부터는 요청 처리 후 응답페이지에 응답할 데이터가 있을 경우 request scope영역에 담는 방법
	/*
	 * 1. Model이라는 객체를 사용하는 방법
	 *    응답뷰로 전달하고자 하는 데이터를 맵형식(key, value)로 담을 수 있다.
	 *    scope는 request임
	 *    단, setAttribute가 아닌 addAttribute를 이용해서 담음
	 
	@RequestMapping("login.me")
	public String loginMember(Member m, HttpSession session, Model model) {
		Member loginUser = mService.loginMember(m);
		if(loginUser == null) { // 로그인 실패
			model.addAttribute("errorMsg", "로그인실패!");
			return "common/errorPage";
		} else { // 로그인 성공
			session.setAttribute("loginUser", loginUser);
			return "redirect:/"; 
		}
		
	}
	*/
	
	/*
	 * 2. ModelAndView 객체를 사용하는 방법
	 *    Model은 전달하고자 하는 데이터를 맵형식으로 담는 공간이라고 한다면
	 *    View는 RequestDispatcher처럼 forwad 할 뷰 페이지 정보를 담을 수 있는 공간
	 *    
	 */
	
	@RequestMapping("login.me")
	public ModelAndView loginMember(Member m, HttpSession session, ModelAndView mv) {
		Member loginUser = mService.loginMember(m);
		if(loginUser == null) { // 로그인 실패
			mv.addObject("errorMsg", "로그인실패!");
			mv.setViewName("common/errorPage");
		} else { // 로그인 성공
			session.setAttribute("loginUser", loginUser);
			mv.setViewName("redirect:/"); 
		}
		return mv;	
	}
	
	@RequestMapping("logout.me")
	public String logoutMember(HttpSession session) {
		session.invalidate(); // invalidate 무효화시키는 메소드
		return "redirect:/"; 
	}
	
	@RequestMapping("enrollForm.me")
	public String enrollForm() {
		// /WEB-INF/views/
		return "member/memberEnrollForm";
	}
	
	@RequestMapping("insert.me")
	public String insertMember(Member m) {
		System.out.println(m);
		
		return "member/memberEnrollForm";
	}
}
